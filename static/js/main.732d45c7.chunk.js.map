{"version":3,"sources":["components/providers/SessionProvider/SessionProvider.js","components/providers/ParallaxProvider/ParallaxProvider.js","components/providers/ThemeProvider/ThemeProvider.js","components/views/Body/Body.js","components/common/DivCentered.js","components/common/H1Centered.js","components/views/Intro/Intro.js","components/views/AboutMe/AboutMe.js","components/views/AboutMeDescription/components/Description/Description.js","components/views/AboutMeDescription/components/Image/Image.js","components/views/AboutMeDescription/AboutMeDescription.js","components/views/Banner/Banner.js","components/views/Main/Main.js","components/views/Router/Router.js","components/index.js","serviceWorker.js","index.js"],"names":["SessionContext","React","createContext","SessionProvider","children","props","Provider","value","ParallaxProvider","Theme","theme","StyledBody","styled","div","colors","beige","fontFamily","robotoMono","Body","defaultProps","backgroundColor","DivCentered","height","H1Centered","h1","fontSize","StyledSpan","span","plum","StyledP","p","Intro","language","useContext","hello","name","scroll","StyledH1","AboutMe","aboutMe","StyledDiv","Description","description","map","index","key","StyledImg","img","Image","basename","src","kenting","AboutMeDescription","StyledVerticalDiv","StyledBannerDiv","Banner","imageSrc","style","className","layers","image","amount","Main","images","vancouver","Router","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.732d45c7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst SessionContext = React.createContext({});\r\n\r\nconst SessionProvider = ({ children, ...props }) => {\r\n  return (\r\n    <SessionContext.Provider value={{ ...props }}>\r\n      {children}\r\n    </SessionContext.Provider>\r\n  );\r\n};\r\n\r\nSessionProvider.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport { SessionContext, SessionProvider };\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ParallaxProvider as ParallaxProv } from \"react-scroll-parallax\";\r\n\r\nconst ParallaxProvider = ({ children }) => {\r\n  return <ParallaxProv>{children}</ParallaxProv>;\r\n};\r\n\r\nParallaxProvider.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport { ParallaxProvider };\r\n","import React from \"react\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Theme = ({ children, theme }) => {\r\n  return <ThemeProvider theme={theme}>{children}</ThemeProvider>;\r\n};\r\n\r\nTheme.propTypes = {\r\n  theme: PropTypes.object.isRequired,\r\n};\r\n\r\nexport { Theme };\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst StyledBody = styled.div`\r\n  background-color: ${({ theme: { colors } }) => colors.beige};\r\n  font-family: ${({ theme: { fontFamily } }) => fontFamily.robotoMono};\r\n`;\r\n\r\nconst Body = ({ children }) => <StyledBody>{children}</StyledBody>;\r\n\r\nBody.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nBody.defaultProps = {\r\n  backgroundColor: \"white\",\r\n};\r\n\r\nexport { Body };\r\n","import styled from \"styled-components\";\r\n\r\nconst DivCentered = styled.div`\r\n  height: ${(props) => `${props.height}vh`};\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport { DivCentered };\r\n","import styled from \"styled-components\";\r\n\r\nconst H1Centered = styled.h1`\r\n  position: absolute;\r\n  font-size: ${(props) => `${props.fontSize}vw`};\r\n  text-align: center;\r\n  margin-block-start: 0;\r\n`;\r\n\r\nexport { H1Centered };\r\n","import React, { useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { SessionContext } from \"../../providers\";\r\nimport { DivCentered, H1Centered } from \"../../common\";\r\n\r\nconst StyledSpan = styled.span`\r\n  color: ${({ theme: { colors } }) => colors.plum};\r\n`;\r\n\r\nconst StyledP = styled.p`\r\n  position: absolute;\r\n  bottom: 5em;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  color: #3d3547;\r\n  font-weight: 500;\r\n`;\r\n\r\nconst Intro = () => {\r\n  const { language } = useContext(SessionContext);\r\n  return (\r\n    <DivCentered height={100}>\r\n      <H1Centered fontSize={9}>\r\n        {language.hello} <StyledSpan>{language.name}</StyledSpan>\r\n      </H1Centered>\r\n      <StyledP>{language.scroll}</StyledP>\r\n    </DivCentered>\r\n  );\r\n};\r\n\r\nexport { Intro };\r\n","import React, { useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { SessionContext } from \"../../providers\";\r\nimport { DivCentered, H1Centered } from \"../../common\";\r\n\r\nconst StyledH1 = styled(H1Centered)`\r\n  border-top: ${({ theme: { colors } }) => `0.1em solid ${colors.plum}`};\r\n  border-bottom: ${({ theme: { colors } }) => `0.1em solid ${colors.plum}`};\r\n  padding: 0.25em;\r\n  font-style: italic;\r\n`;\r\n\r\nconst AboutMe = () => {\r\n  const { language } = useContext(SessionContext);\r\n  return (\r\n    <DivCentered height={50}>\r\n      <StyledH1 fontSize={7}>{language.aboutMe}</StyledH1>\r\n    </DivCentered>\r\n  );\r\n};\r\n\r\nexport { AboutMe };\r\n","import React, { useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { SessionContext } from \"../../../../providers\";\r\n\r\nconst StyledDiv = styled.div`\r\n  width: 60%;\r\n  padding: 2em 2em 2em 8em;\r\n\r\n  @media (max-width: 414px) {\r\n    width: 100%;\r\n    padding: 2em;\r\n  }\r\n`;\r\n\r\nconst DescriptionBody = (descriptionArray) => {\r\n  return descriptionArray.map((description, index) => {\r\n    return <p key={index}>{description}</p>;\r\n  });\r\n};\r\n\r\nconst Description = () => {\r\n  const { language } = useContext(SessionContext);\r\n  return <StyledDiv>{DescriptionBody(language.description)}</StyledDiv>;\r\n};\r\n\r\nexport { Description };\r\n","import React, { useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { SessionContext } from \"../../../../providers\";\r\n\r\nconst StyledDiv = styled.div`\r\n  width: 40%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  @media (max-width: 414px) {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst StyledP = styled.p`\r\n  font-style: italic;\r\n`;\r\n\r\nconst StyledImg = styled.img`\r\n  max-height: 70%;\r\n  max-width: 70%;\r\n`;\r\n\r\nconst Image = () => {\r\n  const { language, basename } = useContext(SessionContext);\r\n  return (\r\n    <StyledDiv>\r\n      <StyledImg src={`${basename}/images/kenting.jpg`} />\r\n      <StyledP>{language.kenting}</StyledP>\r\n    </StyledDiv>\r\n  );\r\n};\r\n\r\nexport { Image };\r\n","import React from \"react\";\r\n\r\nimport { DivCentered, H1Centered } from \"../../common\";\r\nimport { Description, Image } from \"./components\";\r\n\r\nconst AboutMeDescription = () => {\r\n  return (\r\n    <DivCentered height={100}>\r\n      <Description />\r\n      <Image />\r\n    </DivCentered>\r\n  );\r\n};\r\n\r\nexport { AboutMeDescription };\r\n","import React from \"react\";\r\nimport { ParallaxBanner } from \"react-scroll-parallax\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./Banner.css\";\r\n\r\nconst StyledVerticalDiv = styled.div`\r\n  width: 100%;\r\n  overflow-x: hidden;\r\n\r\n  &:before {\r\n    position: fixed;\r\n    display: inline-block;\r\n    padding: 4px;\r\n    top: 10px;\r\n    left: 50%;\r\n    text-align: center;\r\n    letter-spacing: 0.05em;\r\n    text-transform: uppercase;\r\n    background-color: rgba(255, 255, 255, 0.1);\r\n    border-radius: 3px;\r\n    color: white;\r\n    z-index: 1000;\r\n    transform: translate3d(-50%, 0, 0);\r\n  }\r\n`;\r\n\r\nconst StyledBannerDiv = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst Banner = ({ imageSrc, height }) => {\r\n  return (\r\n    <StyledVerticalDiv>\r\n      <StyledBannerDiv>\r\n        <ParallaxBanner\r\n          style={{\r\n            height: `${height}vh`,\r\n          }}\r\n          className={\"bannerBg\"}\r\n          layers={[{ image: imageSrc, amount: 0.2 }]}\r\n        />\r\n      </StyledBannerDiv>\r\n    </StyledVerticalDiv>\r\n  );\r\n};\r\n\r\nBanner.propTypes = {\r\n  imageSrc: PropTypes.string.isRequired,\r\n  height: PropTypes.number.isRequired,\r\n};\r\n\r\nBanner.defaultProps = {\r\n  height: 100,\r\n};\r\n\r\nexport { Banner };\r\n","import React, { useContext } from \"react\";\r\n\r\nimport {\r\n  ParallaxProvider,\r\n  SessionContext,\r\n  ThemeProvider,\r\n} from \"../../providers\";\r\nimport { Body } from \"../Body\";\r\nimport { Intro } from \"../Intro\";\r\nimport { AboutMe } from \"../AboutMe\";\r\nimport { AboutMeDescription } from \"../AboutMeDescription\";\r\nimport { Banner } from \"../Banner\";\r\n\r\nconst Main = () => {\r\n  const { language, theme } = useContext(SessionContext);\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <ParallaxProvider>\r\n        <Body>\r\n          <Intro />\r\n          <AboutMe />\r\n          <AboutMeDescription />\r\n          <Banner imageSrc={language.images.vancouver} height={50} />\r\n        </Body>\r\n      </ParallaxProvider>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport { Main };\r\n","import React, { useContext } from \"react\";\r\nimport { BrowserRouter, Route } from \"react-router-dom\";\r\n\r\nimport { Main } from \"../Main\";\r\nimport { SessionContext } from \"../../providers\";\r\n\r\nconst Router = () => {\r\n  const { basename } = useContext(SessionContext);\r\n  return (\r\n    <BrowserRouter basename={basename}>\r\n      <Route exact path={\"/\"} component={Main} />\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport { Router };\r\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { SessionProvider } from \"./providers\";\nimport { Router } from \"./views\";\nimport language from \"../resources/language/en.json\";\nimport theme from \"../resources/theme/theme.json\";\n\nconst App = ({ basename }) => (\n  <SessionProvider basename={basename} language={language} theme={theme}>\n    <Router />\n  </SessionProvider>\n);\n\nApp.propTypes = {\n  basename: PropTypes.string.isRequired,\n};\n\nexport { App };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./resources/styles/index.css\";\nimport { App } from \"./components\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App basename={process.env.PUBLIC_URL} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}